cmake_minimum_required(VERSION 3.20)
project(TestApp)

set(CMAKE_CXX_STANDARD 20)

if(NOT DEFINED RENDERER_INSTALL_DIR)
    message(FATAL_ERROR "'RENDERER_INSTALL_DIR' is not set. Add -DRENDERER_INSTALL_DIR=path/to/VkRenderer/install")
endif()

IF(WIN32)
    IF (NOT Vulkan_FOUND)
        if(DEFINED ENV{VK_SDK_PATH})
            find_library(Vulkan_LIBRARY NAMES vulkan-1 vulkan PATHS $ENV{VK_SDK_PATH}/Lib)
            IF (Vulkan_LIBRARY)
                set(Vulkan_FOUND ON)
                include_directories($ENV{VK_SDK_PATH}/Include)
                MESSAGE("Using Vulkan SDK installed here:" $ENV{VK_SDK_PATH})
            ENDIF()

            set(VULKAN_SDK_PATH $ENV{VK_SDK_PATH})
        ELSE()
            MESSAGE(FATAL_ERROR "Vulkan not found. Make sure you have Vulkan SDK installed in your system")
        ENDIF()
    ELSE()
        include_directories(${Vulkan_INCLUDE_DIR})
    ENDIF()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_WIN32_KHR")
ELSEIF(UNIX)
    IF (DEFINED ENV{VULKAN_SDK})
        find_library(Vulkan_LIBRARY NAMES vulkan HINTS $ENV{VULKAN_SDK}/lib REQUIRED)
        IF (Vulkan_LIBRARY)
            set(Vulkan_FOUND ON)
            include_directories($ENV{VULKAN_SDK}/include)
            MESSAGE("Using bundled Vulkan library version")
        ENDIF()
        set(VULKAN_SDK_PATH $ENV{VULKAN_SDK})
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_XLIB_KHR -DVK_USE_PLATFORM_XCB_KHR")
    ELSE()
        MESSAGE(FATAL_ERROR "Vulkan not found. Make sure you have Vulkan SDK installed in your system")
    ENDIF()
    find_package(Threads REQUIRED)
ELSEIF(APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_USE_PLATFORM_MACOS_MVK -DVK_EXAMPLE_XCODE_GENERATED")
    # Todo : android?
ENDIF(WIN32)

IF (NOT Vulkan_FOUND)
    message(FATAL_ERROR "Could not find Vulkan library!")
ELSE()
    message(STATUS ${Vulkan_LIBRARY})
ENDIF()


set(RENDERER_LIB_DIR ${RENDERER_INSTALL_DIR}/lib)
set(RENDERER_INCLUDE_DIR ${RENDERER_INSTALL_DIR}/include)
include_directories(${RENDERER_INCLUDE_DIR})
include_directories(${RENDERER_INCLUDE_DIR}/vkw)
include_directories(external)
include_directories(external/glm)
include_directories(${CMAKE_CURRENT_BINARY_DIR})
find_library(RENDERER_LIB NAMES VkWrapper.a libVkWrapper libVkWrapper.so PATHS ${RENDERER_LIB_DIR} REQUIRED)
message(STATUS ${RENDERER_LIB})


find_package(glfw3 3.3 REQUIRED)
set(GLFW_LIBRARY glfw)

if(NOT SPIRV_TOOLS_INSTALL_DIR)
    message(FATAL_ERROR "Please, specify SPIRV_TOOLS_INSTALL_DIR")
endif()

if(WIN32)
    set(SPIRV-Tools_DIR ${SPIRV_TOOLS_INSTALL_DIR}/SPIRV-Tools/cmake)
    set(SPIRV-Tools-opt_DIR ${SPIRV_TOOLS_INSTALL_DIR}/SPIRV-Tools-opt/cmake)
    set(SPIRV-Tools-link_DIR ${SPIRV_TOOLS_INSTALL_DIR}/SPIRV-Tools-link/cmake)
elseif(UNIX)
    set(SPIRV-Tools_DIR ${SPIRV_TOOLS_INSTALL_DIR}/lib/cmake/SPIRV-Tools)
    set(SPIRV-Tools-opt_DIR ${SPIRV_TOOLS_INSTALL_DIR}/lib/cmake/SPIRV-Tools-opt)
    set(SPIRV-Tools-link_DIR ${SPIRV_TOOLS_INSTALL_DIR}/lib/cmake/SPIRV-Tools-link)
endif()

find_package(SPIRV-Tools REQUIRED)
find_package(SPIRV-Tools-opt REQUIRED)
find_package(SPIRV-Tools-link REQUIRED)

find_package(Boost 1.62 REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})

include_directories(source)
include_directories(source/common)
add_subdirectory(external)
add_subdirectory(source)

set(EXAMPLE_ASSET_PATH "./data")

configure_file(source/common/AssetPath.inc.in AssetPath.inc)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/source/data/shaders)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/source/data/textures)

install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/source/data DESTINATION .)